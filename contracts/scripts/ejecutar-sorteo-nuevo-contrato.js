const { ethers } = require("hardhat");

async function main() {
    console.log("üöÄ EJECUTAR SORTEO - NUEVO CONTRATO AVALANCHE FUJI");
    console.log("=".repeat(60));
    
    // NUEVO CONTRATO CON CONFIGURACI√ìN VRF CORRECTA
    const CONTRACT_ADDRESS = "0xe980475E4aF2f0B937059E9394262b36827B215F";
    
    const [signer] = await ethers.getSigners();
    console.log("üë§ Ejecutando con cuenta:", signer.address);
    console.log("üìç Nuevo Contrato:", CONTRACT_ADDRESS);
    console.log("üèîÔ∏è Red: Avalanche Fuji Testnet");
    
    try {
        // Conectar al nuevo contrato
        const LottoMojiCore = await ethers.getContractFactory("LottoMojiCore");
        const contract = LottoMojiCore.attach(CONTRACT_ADDRESS);
        
        // VERIFICAR ESTADO PREVIO
        console.log("\nüìä ESTADO PREVIO AL SORTEO:");
        console.log("-".repeat(40));
        
        const currentGameDay = await contract.getCurrentDay();
        const ticketCounter = await contract.ticketCounter();
        const totalDraws = await contract.totalDrawsExecuted();
        const lastDrawTime = await contract.lastDrawTime();
        const gameActive = await contract.gameActive();
        const automationActive = await contract.automationActive();
        
        console.log("üìÖ Current Game Day:", currentGameDay.toString());
        console.log("üé´ Tickets vendidos:", ticketCounter.toString());
        console.log("üéØ Sorteos ejecutados:", totalDraws.toString());
        console.log("‚è∞ Last Draw Time:", new Date(Number(lastDrawTime) * 1000).toISOString());
        console.log("üéÆ Game Active:", gameActive ? "‚úÖ" : "‚ùå");
        console.log("ü§ñ Automation Active:", automationActive ? "‚úÖ" : "‚ùå");
        
        // VERIFICAR UPKEEP
        console.log("\nüîÑ VERIFICACI√ìN DE UPKEEP:");
        console.log("-".repeat(35));
        
        const [upkeepNeeded, performData] = await contract.checkUpkeep("0x");
        console.log("üîÑ Upkeep Needed:", upkeepNeeded ? "‚úÖ S√ç" : "‚ùå NO");
        
        if (!upkeepNeeded) {
            console.log("‚ùå El upkeep no est√° listo. Abortando...");
            console.log("üí° Es posible que necesites esperar m√°s tiempo o comprar tickets");
            return;
        }
        
        console.log("‚úÖ Upkeep est√° listo para ejecutarse");
        
        // VERIFICAR POOLS ANTES DEL SORTEO (si hay tickets)
        if (Number(ticketCounter) > 0) {
            console.log("\nüí∞ POOLS ANTES DEL SORTEO:");
            console.log("-".repeat(35));
            
            const todaysPools = await contract.getDailyPoolInfo(currentGameDay);
            const mainPools = await contract.getMainPoolBalances();
            
            console.log("üìÖ Today's Collection:", ethers.formatUnits(todaysPools.totalCollected, 6), "USDC");
            console.log("üí∞ Main Pool - First Prize:", ethers.formatUnits(mainPools.firstPrizeAccumulated, 6), "USDC");
            console.log("ü•à Main Pool - Second Prize:", ethers.formatUnits(mainPools.secondPrizeAccumulated, 6), "USDC");
            console.log("ü•â Main Pool - Third Prize:", ethers.formatUnits(mainPools.thirdPrizeAccumulated, 6), "USDC");
        } else {
            console.log("\nüí° NO HAY TICKETS VENDIDOS");
            console.log("‚ö†Ô∏è El sorteo se ejecutar√° pero no habr√° ganadores");
        }
        
        // EJECUTAR SORTEO
        console.log("\nüöÄ EJECUTANDO SORTEO:");
        console.log("-".repeat(30));
        
        console.log("‚ö° Enviando transacci√≥n performUpkeep...");
        console.log("üîÑ Usando configuraci√≥n espec√≠fica para Avalanche Fuji...");
        
        // Configuraci√≥n optimizada para Avalanche Fuji
        const performUpkeepTx = await contract.performUpkeep(performData, {
            gasLimit: 3000000, // Gas alto para VRF
            gasPrice: ethers.parseUnits("30", "gwei") // Gas price t√≠pico de Fuji
        });
        
        console.log("üì° Transacci√≥n enviada:", performUpkeepTx.hash);
        console.log("üîó Snowtrace:", `https://testnet.snowtrace.io/tx/${performUpkeepTx.hash}`);
        console.log("‚è≥ Esperando confirmaci√≥n...");
        
        const receipt = await performUpkeepTx.wait();
        
        if (receipt.status === 1) {
            console.log("‚úÖ ¬°TRANSACCI√ìN CONFIRMADA!");
            console.log("‚õΩ Gas usado:", receipt.gasUsed.toString());
            
            // Esperar un poco para el VRF callback
            console.log("\n‚è≥ Esperando VRF callback (puede tomar 1-2 minutos)...");
            console.log("üé≤ Chainlink VRF est√° generando n√∫meros aleatorios...");
            
            // Verificar resultados peri√≥dicamente
            let attempts = 0;
            const maxAttempts = 12; // 2 minutos m√°ximo
            
            while (attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 10000)); // Esperar 10 segundos
                attempts++;
                
                console.log(`üîç Verificaci√≥n ${attempts}/${maxAttempts}...`);
                
                const updatedDraws = await contract.totalDrawsExecuted();
                const winningNumbers = await contract.lastWinningNumbers();
                
                if (Number(updatedDraws) > Number(totalDraws)) {
                    console.log("\nüéâ ¬°SORTEO COMPLETADO!");
                    console.log("üéØ Total sorteos ejecutados:", updatedDraws.toString());
                    console.log("üé≤ N√∫meros ganadores:", Array.from(winningNumbers).join(", "));
                    
                    // Verificar estado del d√≠a actual
                    const updatedTodaysPools = await contract.getDailyPoolInfo(currentGameDay);
                    console.log("üé≤ Sorteo del d√≠a completado:", updatedTodaysPools.drawn ? "‚úÖ" : "‚ùå");
                    console.log("üí∞ Distribuci√≥n completada:", updatedTodaysPools.distributed ? "‚úÖ" : "‚ùå");
                    
                    if (updatedTodaysPools.drawn) {
                        const todaysWinningNumbers = updatedTodaysPools.winningNumbers;
                        console.log("üé≤ N√∫meros del d√≠a:", Array.from(todaysWinningNumbers).join(", "));
                    }
                    
                    // Verificar pools despu√©s del sorteo
                    const updatedMainPools = await contract.getMainPoolBalances();
                    const updatedReserves = await contract.getReserveBalances();
                    
                    console.log("\nüí∞ POOLS DESPU√âS DEL SORTEO:");
                    console.log("- First Prize:", ethers.formatUnits(updatedMainPools.firstPrizeAccumulated, 6), "USDC");
                    console.log("- Second Prize:", ethers.formatUnits(updatedMainPools.secondPrizeAccumulated, 6), "USDC");
                    console.log("- Third Prize:", ethers.formatUnits(updatedMainPools.thirdPrizeAccumulated, 6), "USDC");
                    console.log("- Development:", ethers.formatUnits(updatedMainPools.developmentAccumulated, 6), "USDC");
                    
                    const totalReserves = updatedReserves.firstPrizeReserve + 
                                        updatedReserves.secondPrizeReserve + 
                                        updatedReserves.thirdPrizeReserve;
                    console.log("- Total Reserves:", ethers.formatUnits(totalReserves, 6), "USDC");
                    
                    console.log("\nüéä ¬°SORTEO EXITOSO CON NUEVO CONTRATO!");
                    break;
                }
                
                if (attempts === maxAttempts) {
                    console.log("\n‚è∞ Tiempo de espera agotado");
                    console.log("üí° El VRF callback puede estar tardando m√°s de lo normal");
                    console.log("üîÑ Verifica en unos minutos si el sorteo se complet√≥");
                }
            }
            
        } else {
            console.log("‚ùå Transacci√≥n fall√≥");
        }
        
        console.log("\nüìã PR√ìXIMOS PASOS:");
        console.log("-".repeat(25));
        console.log("1. ‚úÖ Nuevo contrato funcionando con VRF correcto");
        console.log("2. üì± Actualizar frontend con nueva direcci√≥n del contrato");
        console.log("3. üé´ Comprar tickets para pr√≥ximos sorteos");
        console.log("4. üîÑ Configurar Chainlink Automation para sorteos autom√°ticos");
        console.log("5. ‚è∞ Pr√≥ximo sorteo: ma√±ana a las 4:00 UTC");
        
    } catch (error) {
        console.error("‚ùå Error ejecutando sorteo:", error.message);
        console.error("üìã Stack:", error.stack);
        
        if (error.code === 'CALL_EXCEPTION') {
            console.log("\nüí° POSIBLES CAUSAS:");
            console.log("- Problemas con la suscripci√≥n VRF");
            console.log("- Fondos LINK insuficientes");
            console.log("- Gas insuficiente");
            console.log("- Contrato no agregado como consumer VRF");
        }
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("üí• Error fatal:", error);
        process.exit(1);
    }); 