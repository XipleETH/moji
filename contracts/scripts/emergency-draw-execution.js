const { ethers } = require("hardhat");

// CONTRACT V3 ADDRESS
const CONTRACT_ADDRESS = "0xD72976F365415F098736F9F4F9AD1Af3fE15B0d5";

async function main() {
    console.log("üö® EJECUCION DE SORTEO DE EMERGENCIA - LOTTOMOJI V3");
    console.log("=".repeat(65));
    console.log("‚ö†Ô∏è ADVERTENCIA: Este script simula n√∫meros aleatorios");
    console.log("‚ö†Ô∏è Solo usar en emergencias cuando VRF no funcione");
    console.log("=".repeat(65));
    
    const [deployer] = await ethers.getSigners();
    console.log("üë§ Admin wallet:", deployer.address);
    
    const LottoMojiCore = await ethers.getContractFactory("LottoMojiCore");
    const contract = LottoMojiCore.attach(CONTRACT_ADDRESS);
    
    try {
        // 1. Verificar que somos owner
        const owner = await contract.owner();
        if (owner.toLowerCase() !== deployer.address.toLowerCase()) {
            console.log("‚ùå ERROR: No eres el owner del contrato");
            return;
        }
        
        console.log("‚úÖ Owner verificado");
        
        // 2. Generar n√∫meros pseudo-aleatorios usando block hash + timestamp
        console.log("\nüé≤ GENERANDO NUMEROS PSEUDO-ALEATORIOS");
        console.log("-".repeat(40));
        
        const latestBlock = await ethers.provider.getBlock('latest');
        const blockHash = latestBlock.hash;
        const timestamp = Math.floor(Date.now() / 1000);
        
        console.log("üì¶ Block Hash:", blockHash);
        console.log("‚è∞ Timestamp:", timestamp);
        
        // Crear semilla combinando block hash y timestamp
        const seed = ethers.keccak256(
            ethers.AbiCoder.defaultAbiCoder().encode(
                ['bytes32', 'uint256'], 
                [blockHash, timestamp]
            )
        );
        
        console.log("üå± Seed:", seed);
        
        // Generar 4 n√∫meros aleatorios (0-9 para 10 emojis)
        const randomNumbers = [];
        for (let i = 0; i < 4; i++) {
            const slice = seed.slice(2 + i * 8, 2 + (i + 1) * 8); // 8 hex chars = 4 bytes
            const number = parseInt(slice, 16) % 10; // 0-9 para 10 emojis
            randomNumbers.push(number);
        }
        
        console.log("üéØ N√∫meros generados:", randomNumbers);
        
        // 3. Verificar si el contrato tiene funci√≥n directa para setear ganadores
        console.log("\nüèÜ 3. INTENTANDO EJECUCION DIRECTA");
        console.log("-".repeat(40));
        
        try {
            // Verificar current game day para el sorteo
            const currentGameDay = await contract.getCurrentDay();
            const gameDay = Number(currentGameDay) - 1; // Draw for previous day
            
            console.log("üìÖ Game Day para sorteo:", gameDay);
            
            // M√©todo 1: Si existe funci√≥n para simular VRF response
            try {
                console.log("üîÑ Attempting to simulate VRF fulfillment...");
                
                // Algunos contratos tienen una funci√≥n de testing/emergency
                const fulfillTx = await contract.fulfillRandomWords(
                    1, // requestId
                    randomNumbers.map(n => ethers.toBigInt(n))
                );
                await fulfillTx.wait();
                
                console.log("‚úÖ VRF simulation successful!");
                console.log("üì° Transaction:", fulfillTx.hash);
                
            } catch (fulfillError) {
                console.log("‚ùå VRF simulation not available:", fulfillError.message);
                
                // M√©todo 2: Intentar forzar a trav√©s de automation
                console.log("üîß Attempting forced automation...");
                
                try {
                    // Toggle automation off and on to potentially reset VRF state
                    await contract.toggleAutomation();
                    await contract.toggleAutomation();
                    
                    // Try performUpkeep one more time
                    const [upkeepNeeded, data] = await contract.checkUpkeep("0x");
                    
                    if (upkeepNeeded) {
                        const performTx = await contract.performUpkeep(data, {
                            gasLimit: 3000000 // Higher gas limit
                        });
                        await performTx.wait();
                        
                        console.log("‚úÖ Forced automation successful!");
                        console.log("üì° Transaction:", performTx.hash);
                    } else {
                        throw new Error("Upkeep no longer needed after reset");
                    }
                    
                } catch (automationError) {
                    console.log("‚ùå Forced automation failed:", automationError.message);
                    
                    // M√©todo 3: Informaci√≥n para intervenci√≥n manual
                    console.log("\nüÜò INTERVENCION MANUAL REQUERIDA");
                    console.log("-".repeat(40));
                    console.log("Los n√∫meros sugeridos para el sorteo son:", randomNumbers);
                    console.log("Opciones:");
                    console.log("1. Esperar a que VRF se recupere autom√°ticamente");
                    console.log("2. Fondear VRF subscription en https://vrf.chain.link/");
                    console.log("3. Fondear Chainlink Automation en https://automation.chain.link/");
                    console.log("4. Contactar soporte de Chainlink");
                    console.log("5. Usar funci√≥n de emergency draw si existe en el contrato");
                }
            }
            
        } catch (error) {
            console.log("‚ùå Error en ejecuci√≥n directa:", error.message);
        }
        
        // 4. Verificaci√≥n final
        console.log("\nüìä 4. VERIFICACION FINAL");
        console.log("-".repeat(40));
        
        const finalGameDay = await contract.getCurrentDay();
        const finalLastDrawTime = await contract.lastDrawTime();
        const [finalUpkeepNeeded] = await contract.checkUpkeep("0x");
        
        console.log("üìÖ Current Game Day:", Number(finalGameDay));
        console.log("üïí Last Draw Time:", new Date(Number(finalLastDrawTime) * 1000).toLocaleString());
        console.log("üîÑ Upkeep Still Needed:", finalUpkeepNeeded);
        
        if (!finalUpkeepNeeded) {
            console.log("‚úÖ SUCCESS: El sorteo se ejecut√≥ correctamente!");
        } else {
            console.log("‚ö†Ô∏è El sorteo sigue pendiente. Se requiere intervenci√≥n manual.");
            
            console.log("\nüìû CONTACTOS DE SOPORTE:");
            console.log("- Chainlink Discord: https://discord.gg/chainlink");
            console.log("- Chainlink Docs: https://docs.chain.link/");
            console.log("- VRF Dashboard: https://vrf.chain.link/");
            console.log("- Automation Dashboard: https://automation.chain.link/");
        }
        
        console.log("\n‚úÖ PROCESO DE EMERGENCIA COMPLETADO");
        console.log("=".repeat(65));
        
    } catch (error) {
        console.error("üí• Error cr√≠tico en script de emergencia:", error);
        
        if (error.reason) {
            console.error("üìã Reason:", error.reason);
        }
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    }); 