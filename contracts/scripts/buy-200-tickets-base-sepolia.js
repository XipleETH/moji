const { ethers } = require("hardhat");

async function main() {
    console.log("üî∑ COMPRANDO 200 TICKETS EN BASE SEPOLIA");
    console.log("=".repeat(60));
    
    const CONTRACT_ADDRESS = "0xDAf05A87D1C2Dd6d00f6b9fd9Af4A80d818D1e61";
    const USDC_ADDRESS = "0x036CbD53842c5426634e7929541eC2318f3dCF7e";
    
    // Obtener signer
    const [signer] = await ethers.getSigners();
    console.log("üë§ Comprando con cuenta:", signer.address);
    console.log("üí∞ Balance inicial:", ethers.formatEther(await signer.provider.getBalance(signer.address)), "ETH");
    
    // Conectar a contratos
    const LottoMojiCore = await ethers.getContractFactory("LottoMojiCore");
    const contract = LottoMojiCore.attach(CONTRACT_ADDRESS);
    
    const usdcABI = [
        "function balanceOf(address) view returns (uint256)",
        "function approve(address spender, uint256 amount) returns (bool)",
        "function allowance(address owner, address spender) view returns (uint256)",
        "function decimals() view returns (uint8)"
    ];
    const usdcContract = new ethers.Contract(USDC_ADDRESS, usdcABI, signer);
    
    console.log("\nüìã INFORMACI√ìN DEL CONTRATO:");
    
    // Verificar estado del contrato
    const gameActive = await contract.gameActive();
    const ticketPrice = await contract.TICKET_PRICE();
    const currentGameDay = await contract.currentGameDay();
    const ticketCounter = await contract.ticketCounter();
    
    console.log("- Game Active:", gameActive);
    console.log("- Ticket Price:", ethers.formatUnits(ticketPrice, 6), "USDC");
    console.log("- Current Game Day:", currentGameDay.toString());
    console.log("- Tickets vendidos hasta ahora:", ticketCounter.toString());
    console.log("- Red: Base Sepolia Testnet");
    
    if (!gameActive) {
        console.error("‚ùå El juego no est√° activo!");
        return;
    }
    
    // Verificar balance USDC
    const usdcBalance = await usdcContract.balanceOf(signer.address);
    const totalCost = ticketPrice * 200n; // 200 tickets
    
    console.log("\nüí∞ INFORMACI√ìN FINANCIERA:");
    console.log("- Balance USDC:", ethers.formatUnits(usdcBalance, 6), "USDC");
    console.log("- Costo total (200 tickets):", ethers.formatUnits(totalCost, 6), "USDC");
    console.log("- Costo por ticket:", ethers.formatUnits(ticketPrice, 6), "USDC");
    
    if (usdcBalance < totalCost) {
        console.error("‚ùå Balance USDC insuficiente!");
        console.error(`Necesitas ${ethers.formatUnits(totalCost, 6)} USDC pero solo tienes ${ethers.formatUnits(usdcBalance, 6)} USDC`);
        return;
    }
    
    // Verificar allowance
    const currentAllowance = await usdcContract.allowance(signer.address, CONTRACT_ADDRESS);
    console.log("- Allowance actual:", ethers.formatUnits(currentAllowance, 6), "USDC");
    
    if (currentAllowance < totalCost) {
        console.log("\nüîê APROBANDO USDC...");
        const approveTx = await usdcContract.approve(CONTRACT_ADDRESS, totalCost);
        console.log("üì° Tx de aprobaci√≥n enviada:", approveTx.hash);
        await approveTx.wait();
        console.log("‚úÖ USDC aprobado!");
    } else {
        console.log("‚úÖ USDC ya est√° aprobado");
    }
    
    // Generar 200 combinaciones aleatorias
    console.log("\nüé≤ GENERANDO 200 COMBINACIONES ALEATORIAS...");
    
    const ticketCombinations = [];
    for (let i = 0; i < 200; i++) {
        const combination = [
            Math.floor(Math.random() * 25), // 0-24
            Math.floor(Math.random() * 25),
            Math.floor(Math.random() * 25),
            Math.floor(Math.random() * 25)
        ];
        ticketCombinations.push(combination);
    }
    
    // Mapeo de emojis para mostrar
    const EMOJI_MAP = [
        'üéÆ', 'üé≤', 'üéØ', 'üé∏', 'üé®', // Gaming & Art (0-4)
        'üíé', 'üí∞', 'üí∏', 'üèÜ', 'üéÅ', // Money & Prizes (5-9)
        'üöÄ', 'üåô', '‚≠ê', '‚ú®', 'üåü', // Space & Stars (10-14)
        'üé≠', 'üé™', 'üé¢', 'üé°', 'üé†', // Entertainment (15-19)
        'üçÄ', 'üåà', '‚ö°', 'üî•', 'üí´'  // Luck & Magic (20-24)
    ];
    
    console.log("‚úÖ Combinaciones generadas:");
    for (let i = 0; i < Math.min(10, ticketCombinations.length); i++) {
        const combo = ticketCombinations[i];
        const emojis = combo.map(num => EMOJI_MAP[num]).join(' ');
        console.log(`  ${i + 1}. [${combo.join(', ')}] ‚Üí ${emojis}`);
    }
    if (ticketCombinations.length > 10) {
        console.log(`  ... y ${ticketCombinations.length - 10} combinaciones m√°s`);
    }
    
    // Comprar tickets en lotes
    console.log("\nüõí COMPRANDO TICKETS EN BASE SEPOLIA...");
    
    const BATCH_SIZE = 5; // Comprar de 5 en 5 para evitar problemas de gas
    let successCount = 0;
    let failCount = 0;
    const transactionHashes = [];
    
    for (let batchStart = 0; batchStart < ticketCombinations.length; batchStart += BATCH_SIZE) {
        const batchEnd = Math.min(batchStart + BATCH_SIZE, ticketCombinations.length);
        const currentBatch = ticketCombinations.slice(batchStart, batchEnd);
        
        console.log(`\nüì¶ Lote ${Math.floor(batchStart / BATCH_SIZE) + 1}: Tickets ${batchStart + 1}-${batchEnd}`);
        
        for (let i = 0; i < currentBatch.length; i++) {
            const ticketIndex = batchStart + i;
            const combination = currentBatch[i];
            
            try {
                console.log(`üé´ Comprando ticket ${ticketIndex + 1}/200: [${combination.join(', ')}]`);
                
                const buyTx = await contract.buyTicket(combination, {
                    gasLimit: 500000 // Gas limit conservador para Base
                });
                
                console.log(`üì° Tx enviada: ${buyTx.hash}`);
                const receipt = await buyTx.wait();
                
                transactionHashes.push(buyTx.hash);
                successCount++;
                
                console.log(`‚úÖ Ticket ${ticketIndex + 1} comprado en bloque ${receipt.blockNumber}`);
                
                // Peque√±a pausa entre transacciones
                if (i < currentBatch.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
                
            } catch (error) {
                console.error(`‚ùå Error comprando ticket ${ticketIndex + 1}:`, error.message);
                failCount++;
                
                // Si hay muchos errores consecutivos, parar
                if (failCount > 15) {
                    console.error("üí• Demasiados errores consecutivos. Parando...");
                    break;
                }
            }
        }
        
        // Pausa entre lotes
        if (batchEnd < ticketCombinations.length) {
            console.log("‚è≥ Esperando 3 segundos antes del siguiente lote...");
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
    }
    
    console.log("\nüìä RESUMEN DE COMPRAS EN BASE SEPOLIA:");
    console.log("=".repeat(50));
    console.log(`‚úÖ Tickets comprados exitosamente: ${successCount}`);
    console.log(`‚ùå Tickets fallidos: ${failCount}`);
    console.log(`üí∞ USDC gastado: ${ethers.formatUnits(ticketPrice * BigInt(successCount), 6)} USDC`);
    console.log(`üì° Transacciones realizadas: ${transactionHashes.length}`);
    console.log(`üî∑ Red: Base Sepolia Testnet`);
    
    if (successCount > 0) {
        console.log("\nüéâ ¬°COMPRAS COMPLETADAS EN BASE SEPOLIA!");
        console.log("üìã Hashes de transacciones:");
        transactionHashes.slice(0, 10).forEach((hash, index) => {
            console.log(`  ${index + 1}. https://sepolia.basescan.org/tx/${hash}`);
        });
        
        if (transactionHashes.length > 10) {
            console.log(`  ... y ${transactionHashes.length - 10} transacciones m√°s`);
        }
        
        // Verificar estado final
        console.log("\nüîç VERIFICANDO ESTADO FINAL...");
        const finalTicketCounter = await contract.ticketCounter();
        const finalUsdcBalance = await usdcContract.balanceOf(signer.address);
        
        console.log("- Tickets totales en el contrato:", finalTicketCounter.toString());
        console.log("- Balance USDC final:", ethers.formatUnits(finalUsdcBalance, 6), "USDC");
        
        console.log("\nüé´ ¬°Tickets listos para el pr√≥ximo sorteo!");
        console.log("‚è∞ Pr√≥ximo sorteo: Cada d√≠a a las 16:00 UTC (11:00 AM Colombia)");
        console.log("üî∑ Base Sepolia: https://sepolia.basescan.org/address/" + CONTRACT_ADDRESS);
        
    } else {
        console.log("\nüí• No se pudieron comprar tickets.");
        console.log("üîß Verifica:");
        console.log("- Balance USDC suficiente");
        console.log("- Aprobaci√≥n de USDC");
        console.log("- Estado del contrato");
        console.log("- Conexi√≥n a Base Sepolia");
    }
    
    console.log("\n" + "=".repeat(60));
    console.log("üî∑ COMPRA DE TICKETS EN BASE SEPOLIA COMPLETADA");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    }); 