const { ethers } = require("hardhat");

async function main() {
    console.log("üéØ AN√ÅLISIS DETALLADO DEL D√çA CON TICKETS");
    console.log("=========================================");
    
    const CONTRACT_ADDRESS = "0x900ebdF6C0807E4d3007e07009BDeDFc5E63fbB1";
    const TARGET_DAY = 486470; // D√≠a donde est√°n los 201 tickets
    
    const contract = await ethers.getContractAt("LottoMojiCore", CONTRACT_ADDRESS);
    
    console.log("üìç Contrato:", CONTRACT_ADDRESS);
    console.log("üìÖ Analizando d√≠a:", TARGET_DAY);
    
    // Informaci√≥n del d√≠a espec√≠fico
    const dayPool = await contract.getDailyPoolInfo(TARGET_DAY);
    const dayTickets = await contract.getGameDayTickets(TARGET_DAY);
    
    console.log("\nüìä INFORMACI√ìN DEL D√çA", TARGET_DAY + ":");
    console.log("- Total recolectado:", ethers.formatUnits(dayPool[0], 6), "USDC");
    console.log("- Main pool portion (80%):", ethers.formatUnits(dayPool[1], 6), "USDC");
    console.log("- Reserve portion (20%):", ethers.formatUnits(dayPool[2], 6), "USDC");
    console.log("- Distribuido:", dayPool[3] ? "‚úÖ S√ç" : "‚ùå NO");
    console.log("- Sorteado:", dayPool[4] ? "‚úÖ S√ç" : "‚ùå NO");
    console.log("- Total tickets:", dayTickets.length);
    
    if (dayPool[4]) {
        const winningNumbers = Array.from(dayPool[5]);
        console.log("- üéØ N√∫meros ganadores:", winningNumbers.join(", "));
        
        // Mapeo de emojis
        const EMOJI_MAP = [
            "üéÆ", "üé≤", "üéØ", "üé∏", "üé®",
            "üíé", "üí∞", "üí∏", "üèÜ", "üéÅ", 
            "üöÄ", "üåô", "‚≠ê", "‚ú®", "üåü",
            "üé≠", "üé™", "üé¢", "üé°", "üé†",
            "üçÄ", "üåà", "‚ö°", "üî•", "üí´"
        ];
        
        const winningEmojis = winningNumbers.map(num => EMOJI_MAP[num]).join(" ");
        console.log("- üòÄ Emojis ganadores:", winningEmojis);
        
        // Contadores de ganadores
        let firstPrizeWinners = 0;
        let secondPrizeWinners = 0;
        let thirdPrizeWinners = 0;
        let freeTicketWinners = 0;
        let totalWinners = 0;
        
        const winners = {
            first: [],
            second: [],
            third: [],
            free: []
        };
        
        console.log("\nüîç ANALIZANDO LOS", dayTickets.length, "TICKETS...");
        console.log("(Esto puede tomar un momento...)");
        
        // Analizar en lotes para mejor rendimiento
        const batchSize = 50;
        for (let i = 0; i < dayTickets.length; i += batchSize) {
            const batch = dayTickets.slice(i, Math.min(i + batchSize, dayTickets.length));
            console.log(`üìä Procesando tickets ${i + 1} - ${Math.min(i + batchSize, dayTickets.length)}...`);
            
            for (const ticketId of batch) {
                try {
                    const ticketDetails = await contract.getTicketPrizeDetails(ticketId);
                    const prizeLevel = ticketDetails[0];
                    const exactMatches = ticketDetails[1];
                    const anyOrderMatches = ticketDetails[2];
                    const prizeAmount = ticketDetails[3];
                    const description = ticketDetails[4];
                    
                    if (prizeLevel > 0) {
                        totalWinners++;
                        const ticketInfo = await contract.getFullTicketInfo(ticketId);
                        const ticketNumbers = Array.from(ticketInfo[1]);
                        const owner = ticketInfo[0];
                        
                        const winnerData = {
                            ticketId: ticketId,
                            owner: owner,
                            numbers: ticketNumbers,
                            exactMatches: exactMatches,
                            anyOrderMatches: anyOrderMatches,
                            prizeAmount: prizeAmount,
                            description: description
                        };
                        
                        if (prizeLevel === 1) {
                            firstPrizeWinners++;
                            winners.first.push(winnerData);
                        } else if (prizeLevel === 2) {
                            secondPrizeWinners++;
                            winners.second.push(winnerData);
                        } else if (prizeLevel === 3) {
                            thirdPrizeWinners++;
                            winners.third.push(winnerData);
                        } else if (prizeLevel === 4) {
                            freeTicketWinners++;
                            winners.free.push(winnerData);
                        }
                        
                        // Mostrar ganador inmediatamente
                        const ticketEmojis = ticketNumbers.map(num => EMOJI_MAP[num]).join(" ");
                        console.log(`üé´ ¬°GANADOR! Ticket ${ticketId}: ${ticketEmojis}`);
                        console.log(`   ${description} ‚Üí ${ethers.formatUnits(prizeAmount, 6)} USDC`);
                        console.log(`   Propietario: ${owner}`);
                    }
                } catch (error) {
                    console.log(`‚ö†Ô∏è Error analizando ticket ${ticketId}:`, error.message);
                }
            }
        }
        
        console.log("\nüèÜ RESUMEN FINAL DE GANADORES:");
        console.log("==============================");
        console.log("- ü•á First Prize (4 emojis exactos):", firstPrizeWinners);
        console.log("- ü•à Second Prize (4 emojis cualquier orden):", secondPrizeWinners);
        console.log("- ü•â Third Prize (3 emojis exactos):", thirdPrizeWinners);
        console.log("- üé´ Free Tickets (3 emojis cualquier orden):", freeTicketWinners);
        console.log("- üìä Total ganadores:", totalWinners);
        console.log("- üìâ Tickets sin premio:", dayTickets.length - totalWinners);
        
        // Calcular premios totales
        let totalPrizesPending = BigInt(0);
        
        [...winners.first, ...winners.second, ...winners.third, ...winners.free].forEach(winner => {
            totalPrizesPending += winner.prizeAmount;
        });
        
        console.log("- üí∞ Total premios por reclamar:", ethers.formatUnits(totalPrizesPending, 6), "USDC");
        
        // Mostrar detalles por categor√≠a
        if (winners.first.length > 0) {
            console.log("\nü•á DETALLES DE FIRST PRIZE WINNERS:");
            winners.first.forEach((winner, index) => {
                const winnerEmojis = winner.numbers.map(num => EMOJI_MAP[num]).join(" ");
                console.log(`  ${index + 1}. Ticket ${winner.ticketId}: ${winnerEmojis}`);
                console.log(`     ‚Üí ${ethers.formatUnits(winner.prizeAmount, 6)} USDC`);
                console.log(`     ‚Üí Owner: ${winner.owner}`);
            });
        }
        
        if (winners.second.length > 0) {
            console.log("\nü•à DETALLES DE SECOND PRIZE WINNERS:");
            winners.second.forEach((winner, index) => {
                const winnerEmojis = winner.numbers.map(num => EMOJI_MAP[num]).join(" ");
                console.log(`  ${index + 1}. Ticket ${winner.ticketId}: ${winnerEmojis}`);
                console.log(`     ‚Üí ${ethers.formatUnits(winner.prizeAmount, 6)} USDC`);
                console.log(`     ‚Üí Owner: ${winner.owner}`);
            });
        }
        
        if (winners.third.length > 0) {
            console.log("\nü•â DETALLES DE THIRD PRIZE WINNERS:");
            winners.third.forEach((winner, index) => {
                const winnerEmojis = winner.numbers.map(num => EMOJI_MAP[num]).join(" ");
                console.log(`  ${index + 1}. Ticket ${winner.ticketId}: ${winnerEmojis}`);
                console.log(`     ‚Üí ${ethers.formatUnits(winner.prizeAmount, 6)} USDC`);
                console.log(`     ‚Üí Owner: ${winner.owner}`);
            });
        }
        
        if (winners.free.length > 0) {
            console.log("\nüé´ DETALLES DE FREE TICKET WINNERS:");
            winners.free.slice(0, 10).forEach((winner, index) => { // Mostrar solo primeros 10
                const winnerEmojis = winner.numbers.map(num => EMOJI_MAP[num]).join(" ");
                console.log(`  ${index + 1}. Ticket ${winner.ticketId}: ${winnerEmojis}`);
                console.log(`     ‚Üí ${ethers.formatUnits(winner.prizeAmount, 6)} USDC`);
            });
            if (winners.free.length > 10) {
                console.log(`  ... y ${winners.free.length - 10} ganadores m√°s de free tickets`);
            }
        }
        
        // An√°lisis de la distribuci√≥n del dinero
        console.log("\nüí° QU√â PAS√ì CON EL DINERO DE ESTE D√çA:");
        console.log("======================================");
        
        console.log("üìä DISTRIBUCI√ìN ORIGINAL:");
        console.log("- Total recolectado:", ethers.formatUnits(dayPool[0], 6), "USDC");
        console.log("- Para main pools (80%):", ethers.formatUnits(dayPool[1], 6), "USDC");
        console.log("- Para reserves (20%):", ethers.formatUnits(dayPool[2], 6), "USDC");
        
        console.log("\nüéØ RESULTADO DEL SORTEO:");
        if (firstPrizeWinners === 0) {
            console.log("ü•á First Prize: ‚ùå NO HAY GANADORES ‚Üí Dinero acumulado en main pool");
        } else {
            console.log(`ü•á First Prize: ‚úÖ ${firstPrizeWinners} GANADORES ‚Üí Pueden reclamar premios`);
        }
        
        if (secondPrizeWinners === 0) {
            console.log("ü•à Second Prize: ‚ùå NO HAY GANADORES ‚Üí Dinero acumulado en main pool");
        } else {
            console.log(`ü•à Second Prize: ‚úÖ ${secondPrizeWinners} GANADORES ‚Üí Pueden reclamar premios`);
        }
        
        if (thirdPrizeWinners === 0) {
            console.log("ü•â Third Prize: ‚ùå NO HAY GANADORES ‚Üí Dinero acumulado en main pool");
        } else {
            console.log(`ü•â Third Prize: ‚úÖ ${thirdPrizeWinners} GANADORES ‚Üí Pueden reclamar premios`);
        }
        
        console.log("üîß Development: ‚úÖ SIEMPRE pagado autom√°ticamente");
        console.log("üè¶ Reserves: ‚úÖ 20% enviado a pools de reserva");
        
    } else {
        console.log("‚ö†Ô∏è Este d√≠a a√∫n no ha sido sorteado");
    }
    
    console.log("\n=========================================");
    console.log("üéØ AN√ÅLISIS DETALLADO COMPLETADO");
    console.log("üìä D√≠a", TARGET_DAY, "con", dayTickets.length, "tickets analizado");
    console.log("=========================================");
}

main().catch(console.error); 