// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol";
import "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";
import "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

/**
 * @title LottoMojiCore
 * @dev Core contract combining lottery, VRF, automation and NFT functionality
 */
contract LottoMojiCore is VRFConsumerBaseV2Plus, AutomationCompatibleInterface, ReentrancyGuard, Ownable, ERC721 {
    // VRF Configuration for Base Sepolia
    address constant VRF_COORDINATOR = 0x5C210eF41CD1a72de73bF76eC39637bB0d3d7BEE;
    bytes32 constant KEY_HASH = 0x9e1344a1247c8a1785d0a4681a27152bffdb43666ae5bf7d14d24a5efd44bf71;
    uint32 constant CALLBACK_GAS_LIMIT = 200000;
    uint16 constant REQUEST_CONFIRMATIONS = 3;
    uint32 constant NUM_WORDS = 4;
    
    // Lottery Constants
    uint256 public constant DAILY_RESERVE_PERCENTAGE = 20; // 20% goes to reserve DAILY
    uint256 public constant MAIN_POOL_PERCENTAGE = 80;     // 80% stays in main pools
    uint256 public constant TICKET_PRICE = 2 * 10**6;      // 2 USDC (6 decimals)
    
    // Prize distribution percentages (applied to the 80% main pool portion)
    uint256 public constant FIRST_PRIZE_PERCENTAGE = 80;
    uint256 public constant SECOND_PRIZE_PERCENTAGE = 10;
    uint256 public constant THIRD_PRIZE_PERCENTAGE = 5;
    uint256 public constant DEVELOPMENT_PERCENTAGE = 5;
    
    // Automation configuration
    uint256 public constant DRAW_INTERVAL = 24 hours;
    uint256 public constant SAO_PAULO_OFFSET = 3 hours; // UTC-3
    uint256 public drawTimeUTC = 3 hours; // 00:00 AM SÃ£o Paulo = 03:00 AM UTC
    
    // Emoji indices (0-24) instead of strings
    uint8 public constant EMOJI_COUNT = 25;
    
    // Contract references
    IERC20 public immutable usdcToken;
    
    // VRF state
    uint256 public subscriptionId;
    uint8[4] public lastWinningNumbers;
    
    // Game state
    uint256 public currentGameDay;
    bool public gameActive = true;
    bool public automationActive = true;
    bool public emergencyPause = false;
    
    // Accumulated pools
    struct AccumulatedPools {
        uint256 firstPrizeAccumulated;   // Accumulates when no first prize winners
        uint256 secondPrizeAccumulated;  // Accumulates when no second prize winners
        uint256 thirdPrizeAccumulated;   // Accumulates when no third prize winners
        uint256 developmentAccumulated;  // Always gets paid to development
    }
    
    AccumulatedPools public mainPools;
    
    // Reserve pools
    struct ReservePools {
        uint256 firstPrizeReserve1;     // Accumulates 20% of first prize daily
        uint256 secondPrizeReserve2;    // Accumulates 20% of second prize daily
        uint256 thirdPrizeReserve3;     // Accumulates 20% of third prize daily
    }
    
    ReservePools public reserves;
    
    // Daily pool structure
    struct DailyPool {
        uint256 totalCollected;          // Total USDC collected this day
        uint256 mainPoolPortion;         // 80% portion that goes to main pools
        uint256 reservePortion;          // 20% portion that goes to reserves
        uint256 firstPrizeDaily;         // Daily contribution to first prize
        uint256 secondPrizeDaily;        // Daily contribution to second prize
        uint256 thirdPrizeDaily;         // Daily contribution to third prize
        uint256 developmentDaily;        // Daily contribution to development
        bool distributed;
        uint256 distributionTime;
        uint8[4] winningNumbers;
        bool drawn;
        bool reservesSent;
    }
    
    // Ticket structure
    struct Ticket {
        uint256 tokenId;
        address owner;
        uint8[4] numbers;
        uint256 gameDay;
        bool isActive;
        uint256 purchaseTime;
        bool eligibleForReserve;
    }
    
    // Mappings
    mapping(uint256 => DailyPool) public dailyPools;
    mapping(uint256 => Ticket) public tickets;
    mapping(uint256 => uint256[]) public gameDayTickets;
    mapping(address => uint256[]) public userTickets;
    
    // Counters
    uint256 public ticketCounter;
    uint256 public totalDrawsExecuted;
    uint256 public totalReservesProcessed;
    
    // State tracking
    uint256 public lastDrawTime;
    uint256 public lastMaintenanceTime;
    
    // Events
    event TicketPurchased(
        uint256 indexed ticketId,
        address indexed buyer,
        uint8[4] numbers,
        uint256 gameDay
    );
    
    event DrawExecuted(
        uint256 indexed gameDay,
        uint8[4] winningNumbers,
        uint256 totalMainPools
    );
    
    event PrizeClaimed(
        uint256 indexed ticketId,
        address indexed winner,
        uint256 amount,
        uint8 prizeLevel,
        bool reserveUsedForRefill
    );
    
    event DailyReservesSent(
        uint256 indexed gameDay,
        uint256 firstReserveAmount,
        uint256 secondReserveAmount,
        uint256 thirdReserveAmount,
        uint256 totalSent
    );
    
    constructor(
        address _usdcToken,
        uint256 _subscriptionId
    ) 
        VRFConsumerBaseV2Plus(VRF_COORDINATOR)
        Ownable(msg.sender)
        ERC721("LottoMoji Ticket", "LMOJI")
    {
        usdcToken = IERC20(_usdcToken);
        subscriptionId = _subscriptionId;
        currentGameDay = getCurrentDay();
        lastDrawTime = block.timestamp;
    }
    
    /**
     * @dev Buy ticket with 4 emoji selection (0-24 indices)
     */
    function buyTicket(uint8[4] memory _numbers) external nonReentrant {
        require(gameActive, "Game not active");
        require(validateEmojiSelection(_numbers), "Invalid emoji selection");
        
        // Transfer USDC from user
        require(
            usdcToken.transferFrom(msg.sender, address(this), TICKET_PRICE),
            "USDC transfer failed"
        );
        
        uint256 gameDay = getCurrentDay();
        ticketCounter++;
        
        // Create ticket
        tickets[ticketCounter] = Ticket({
            tokenId: ticketCounter,
            owner: msg.sender,
            numbers: _numbers,
            gameDay: gameDay,
            isActive: true,
            purchaseTime: block.timestamp,
            eligibleForReserve: true
        });
        
        // Update arrays
        gameDayTickets[gameDay].push(ticketCounter);
        userTickets[msg.sender].push(ticketCounter);
        
        // Update daily pool
        dailyPools[gameDay].totalCollected += TICKET_PRICE;
        _updateDailyPoolDistribution(gameDay);
        
        // Mint NFT ticket
        _mint(msg.sender, ticketCounter);
        
        emit TicketPurchased(ticketCounter, msg.sender, _numbers, gameDay);
    }
    
    /**
     * @dev Chainlink VRF callback
     */
    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {
        require(randomWords.length == NUM_WORDS, "Invalid number of random words");
        
        uint8[4] memory randomNumbers;
        for (uint256 i = 0; i < NUM_WORDS; i++) {
            randomNumbers[i] = uint8(randomWords[i] % 25);
        }
        
        lastWinningNumbers = randomNumbers;
        lastDrawTime = block.timestamp;
        
        uint256 gameDay = getCurrentDay() - 1; // Draw for previous day
        dailyPools[gameDay].winningNumbers = randomNumbers;
        dailyPools[gameDay].drawn = true;
        
        // Process winners and accumulate pools
        _processDrawResults(gameDay, randomNumbers);
        
        emit DrawExecuted(gameDay, randomNumbers, _getTotalMainPools());
    }
    
    /**
     * @dev Chainlink Automation checkUpkeep
     */
    function checkUpkeep(
        bytes calldata /* checkData */
    ) external view override returns (bool upkeepNeeded, bytes memory performData) {
        if (!automationActive || emergencyPause) {
            return (false, "");
        }
        
        // Check if it's time for draw
        if (_shouldExecuteDraw()) {
            return (true, abi.encode(true));
        }
        
        return (false, "");
    }
    
    /**
     * @dev Chainlink Automation performUpkeep
     */
    function performUpkeep(bytes calldata /* performData */) external override {
        require(automationActive && !emergencyPause, "Automation paused");
        require(_shouldExecuteDraw(), "Not time for draw");
        
        uint256 gameDay = getCurrentDay() - 1; // Draw for previous day
        
        // Send daily reserves if not sent yet
        if (!dailyPools[gameDay].reservesSent && dailyPools[gameDay].totalCollected > 0) {
            _sendDailyReservesToContract(gameDay);
        }
        
        // Request random numbers from Chainlink VRF
        s_vrfCoordinator.requestRandomWords(
            VRFV2PlusClient.RandomWordsRequest({
                keyHash: KEY_HASH,
                subId: subscriptionId,
                requestConfirmations: REQUEST_CONFIRMATIONS,
                callbackGasLimit: CALLBACK_GAS_LIMIT,
                numWords: NUM_WORDS,
                extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: false}))
            })
        );
        
        totalDrawsExecuted++;
    }
    
    // Internal functions
    function _updateDailyPoolDistribution(uint256 gameDay) internal {
        uint256 total = dailyPools[gameDay].totalCollected;
        
        // Split: 80% to main pools, 20% will go to reserves
        dailyPools[gameDay].mainPoolPortion = (total * MAIN_POOL_PERCENTAGE) / 100;
        dailyPools[gameDay].reservePortion = (total * DAILY_RESERVE_PERCENTAGE) / 100;
        
        // Distribute main pool portion according to percentages
        uint256 mainPortion = dailyPools[gameDay].mainPoolPortion;
        dailyPools[gameDay].firstPrizeDaily = (mainPortion * FIRST_PRIZE_PERCENTAGE) / 100;
        dailyPools[gameDay].secondPrizeDaily = (mainPortion * SECOND_PRIZE_PERCENTAGE) / 100;
        dailyPools[gameDay].thirdPrizeDaily = (mainPortion * THIRD_PRIZE_PERCENTAGE) / 100;
        dailyPools[gameDay].developmentDaily = (mainPortion * DEVELOPMENT_PERCENTAGE) / 100;
    }
    
    function _sendDailyReservesToContract(uint256 gameDay) internal {
        require(!dailyPools[gameDay].reservesSent, "Reserves already sent");
        require(dailyPools[gameDay].totalCollected > 0, "No funds collected");
        
        DailyPool storage pool = dailyPools[gameDay];
        
        // Calculate 20% for reserves from each prize pool
        uint256 firstReserveAmount = (pool.firstPrizeDaily * DAILY_RESERVE_PERCENTAGE) / 100;
        uint256 secondReserveAmount = (pool.secondPrizeDaily * DAILY_RESERVE_PERCENTAGE) / 100;
        uint256 thirdReserveAmount = (pool.thirdPrizeDaily * DAILY_RESERVE_PERCENTAGE) / 100;
        
        // Update reserves
        reserves.firstPrizeReserve1 += firstReserveAmount;
        reserves.secondPrizeReserve2 += secondReserveAmount;
        reserves.thirdPrizeReserve3 += thirdReserveAmount;
        
        // Update daily pool to reflect 80% remaining
        pool.firstPrizeDaily = pool.firstPrizeDaily - firstReserveAmount;
        pool.secondPrizeDaily = pool.secondPrizeDaily - secondReserveAmount;
        pool.thirdPrizeDaily = pool.thirdPrizeDaily - thirdReserveAmount;
        pool.reservesSent = true;
        
        uint256 totalReserveAmount = firstReserveAmount + secondReserveAmount + thirdReserveAmount;
        totalReservesProcessed++;
        
        emit DailyReservesSent(
            gameDay,
            firstReserveAmount,
            secondReserveAmount,
            thirdReserveAmount,
            totalReserveAmount
        );
    }
    
    function _processDrawResults(uint256 gameDay, uint8[4] memory winningNumbers) internal {
        uint256[] memory ticketIds = gameDayTickets[gameDay];
        
        // Count winners by prize level
        uint256 firstCount = 0;
        uint256 secondCount = 0;
        uint256 thirdCount = 0;
        
        for (uint256 i = 0; i < ticketIds.length; i++) {
            uint256 ticketId = ticketIds[i];
            uint8 prizeLevel = checkPrizeLevel(tickets[ticketId].numbers, winningNumbers);
            
            if (prizeLevel == 1) firstCount++;
            else if (prizeLevel == 2) secondCount++;
            else if (prizeLevel == 3) thirdCount++;
        }
        
        // Add daily contributions to main pools
        mainPools.firstPrizeAccumulated += dailyPools[gameDay].firstPrizeDaily;
        mainPools.secondPrizeAccumulated += dailyPools[gameDay].secondPrizeDaily;
        mainPools.thirdPrizeAccumulated += dailyPools[gameDay].thirdPrizeDaily;
        mainPools.developmentAccumulated += dailyPools[gameDay].developmentDaily;
        
        // Development always gets paid
        if (mainPools.developmentAccumulated > 0) {
            require(
                usdcToken.transfer(owner(), mainPools.developmentAccumulated),
                "Development payment failed"
            );
            mainPools.developmentAccumulated = 0;
        }
        
        dailyPools[gameDay].distributed = true;
        dailyPools[gameDay].distributionTime = block.timestamp;
    }
    
    function _shouldExecuteDraw() internal view returns (bool) {
        // Check if enough time has passed since last draw
        if (block.timestamp < lastDrawTime + DRAW_INTERVAL) {
            return false;
        }
        
        // Check if it's the right time of day (3:00 AM SÃ£o Paulo)
        uint256 currentHour = (block.timestamp % 1 days) / 1 hours;
        uint256 targetHour = drawTimeUTC / 1 hours;
        
        // Allow execution within 1 hour window
        return (currentHour >= targetHour && currentHour < targetHour + 1);
    }
    
    function _getTotalMainPools() internal view returns (uint256) {
        return mainPools.firstPrizeAccumulated + 
               mainPools.secondPrizeAccumulated + 
               mainPools.thirdPrizeAccumulated + 
               mainPools.developmentAccumulated;
    }
    
    // Public view functions
    function validateEmojiSelection(uint8[4] memory emojis) public pure returns (bool) {
        for (uint256 i = 0; i < 4; i++) {
            if (emojis[i] >= EMOJI_COUNT) return false;
        }
        return true;
    }
    
    function checkPrizeLevel(uint8[4] memory ticket, uint8[4] memory winning) public pure returns (uint8) {
        // Check first prize: 4 exact in order
        bool exactOrder = true;
        for (uint256 i = 0; i < 4; i++) {
            if (ticket[i] != winning[i]) {
                exactOrder = false;
                break;
            }
        }
        if (exactOrder) return 1;
        
        // Check second prize: 4 exact any order
        if (_hasAllNumbers(ticket, winning)) return 2;
        
        // Check third prize: 3 exact in order
        uint256 exactOrderCount = 0;
        for (uint256 i = 0; i < 4; i++) {
            if (ticket[i] == winning[i]) exactOrderCount++;
        }
        if (exactOrderCount >= 3) return 3;
        
        // Check free ticket: 3 exact any order
        if (_countMatches(ticket, winning) >= 3) return 4;
        
        return 0;
    }
    
    function _hasAllNumbers(uint8[4] memory ticket, uint8[4] memory winning) internal pure returns (bool) {
        for (uint256 i = 0; i < 4; i++) {
            bool found = false;
            for (uint256 j = 0; j < 4; j++) {
                if (ticket[i] == winning[j]) {
                    found = true;
                    break;
                }
            }
            if (!found) return false;
        }
        return true;
    }
    
    function _countMatches(uint8[4] memory ticket, uint8[4] memory winning) internal pure returns (uint256) {
        uint256 matches = 0;
        for (uint256 i = 0; i < 4; i++) {
            for (uint256 j = 0; j < 4; j++) {
                if (ticket[i] == winning[j]) {
                    matches++;
                    break;
                }
            }
        }
        return matches;
    }
    
    function getCurrentDay() public view returns (uint256) {
        return block.timestamp / 1 days;
    }
    
    function getTimeUntilNextDraw() external view returns (uint256) {
        uint256 nextDrawTime = lastDrawTime + DRAW_INTERVAL;
        if (block.timestamp >= nextDrawTime) {
            return 0;
        }
        return nextDrawTime - block.timestamp;
    }
    
    // Admin functions
    function toggleEmergencyPause() external onlyOwner {
        emergencyPause = !emergencyPause;
    }
    
    function setAutomationActive(bool _active) external onlyOwner {
        automationActive = _active;
    }
    
    function setGameActive(bool _active) external onlyOwner {
        gameActive = _active;
    }
    
    function emergencyWithdraw() external onlyOwner {
        uint256 balance = usdcToken.balanceOf(address(this));
        require(usdcToken.transfer(owner(), balance), "Withdrawal failed");
    }
    
    // Required overrides
    function _baseURI() internal pure override returns (string memory) {
        return "https://api.lottomoji.com/tickets/";
    }
    
    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        _requireMinted(tokenId);
        return string(abi.encodePacked(_baseURI(), _toString(tokenId)));
    }
    
    function _toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
} 