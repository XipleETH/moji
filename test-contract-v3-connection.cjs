const { ethers } = require('ethers');

// Configuraci√≥n del contrato V3
const CONTRACT_ADDRESS = "0x250af59d8E4dd4bf541c7D4c3fBD9C0726C6d822";
const RPC_URL = 'https://api.avax-test.network/ext/bc/C/rpc';

// ABI m√≠nimo del contrato V3
const CONTRACT_ABI = [
  "function pools() view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)",
  "function currentGameDay() view returns (uint24)",
  "function nextDrawTs() view returns (uint256)",
  "function dailyDrawHourUTC() view returns (uint8)",
  "function ticketPrice() view returns (uint256)",
  "function automationActive() view returns (bool)",
  "function emergencyPause() view returns (bool)",
  "function dayResults(uint24) view returns (uint8[4], uint32, uint32, uint32, uint32, bool)"
];

async function testContractV3() {
  console.log('üß™ PROBANDO CONECTIVIDAD CON LOTTOMOJI V3');
  console.log('=========================================');
  console.log(`üìç Contrato: ${CONTRACT_ADDRESS}`);
  console.log(`üåê RPC: ${RPC_URL}`);
  console.log('');

  try {
    // Conectar al provider
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);

    console.log('üìä OBTENIENDO DATOS DEL CONTRATO...');
    console.log('');

    // Obtener datos b√°sicos
    const [
      pools,
      currentGameDay,
      nextDrawTs,
      dailyDrawHourUTC,
      ticketPrice,
      automationActive,
      emergencyPause
    ] = await Promise.all([
      contract.pools(),
      contract.currentGameDay(),
      contract.nextDrawTs(),
      contract.dailyDrawHourUTC(),
      contract.ticketPrice(),
      contract.automationActive(),
      contract.emergencyPause()
    ]);

    // Mostrar informaci√≥n general
    console.log('üìà INFORMACI√ìN GENERAL:');
    console.log(`‚îú‚îÄ D√≠a actual del juego: ${currentGameDay}`);
    console.log(`‚îú‚îÄ Pr√≥ximo sorteo: ${new Date(Number(nextDrawTs) * 1000).toISOString()}`);
    console.log(`‚îú‚îÄ Hora de sorteo: ${dailyDrawHourUTC}:00 UTC`);
    console.log(`‚îú‚îÄ Precio del ticket: ${ethers.formatUnits(ticketPrice, 6)} USDC`);
    console.log(`‚îú‚îÄ Automation activa: ${automationActive ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚îî‚îÄ Pausa de emergencia: ${emergencyPause ? 'üö®' : '‚úÖ'}`);
    console.log('');

    // Mostrar pools
    console.log('üí∞ POOLS DE PREMIOS:');
    console.log(`‚îú‚îÄ Primer premio: ${ethers.formatUnits(pools[0], 6)} USDC`);
    console.log(`‚îú‚îÄ Segundo premio: ${ethers.formatUnits(pools[1], 6)} USDC`);
    console.log(`‚îú‚îÄ Tercer premio: ${ethers.formatUnits(pools[2], 6)} USDC`);
    console.log(`‚îî‚îÄ Desarrollo: ${ethers.formatUnits(pools[3], 6)} USDC`);
    console.log('');

    console.log('üè¶ POOLS DE RESERVA:');
    console.log(`‚îú‚îÄ Reserva primer premio: ${ethers.formatUnits(pools[4], 6)} USDC`);
    console.log(`‚îú‚îÄ Reserva segundo premio: ${ethers.formatUnits(pools[5], 6)} USDC`);
    console.log(`‚îî‚îÄ Reserva tercer premio: ${ethers.formatUnits(pools[6], 6)} USDC`);
    console.log('');

    // Calcular totales
    const totalMain = pools[0] + pools[1] + pools[2] + pools[3];
    const totalReserves = pools[4] + pools[5] + pools[6];
    const grandTotal = totalMain + totalReserves;

    console.log('üìä TOTALES:');
    console.log(`‚îú‚îÄ Total pools principales: ${ethers.formatUnits(totalMain, 6)} USDC`);
    console.log(`‚îú‚îÄ Total reservas: ${ethers.formatUnits(totalReserves, 6)} USDC`);
    console.log(`‚îî‚îÄ GRAN TOTAL: ${ethers.formatUnits(grandTotal, 6)} USDC`);
    console.log('');

    // Probar resultados del d√≠a actual
    try {
      const dayResult = await contract.dayResults(currentGameDay);
      console.log('üéØ RESULTADO DEL D√çA ACTUAL:');
      console.log(`‚îú‚îÄ N√∫meros ganadores: [${dayResult[0].join(', ')}]`);
      console.log(`‚îú‚îÄ Ganadores primer premio: ${dayResult[2]}`);
      console.log(`‚îú‚îÄ Ganadores segundo premio: ${dayResult[3]}`);
      console.log(`‚îú‚îÄ Ganadores tercer premio: ${dayResult[4]}`);
      console.log(`‚îî‚îÄ Procesamiento completo: ${dayResult[5] ? '‚úÖ' : '‚ùå'}`);
    } catch (error) {
      console.log('üéØ RESULTADO DEL D√çA ACTUAL: Sin datos disponibles');
    }
    console.log('');

    // Verificar tiempo restante
    const now = Math.floor(Date.now() / 1000);
    const timeRemaining = Number(nextDrawTs) - now;
    
    if (timeRemaining > 0) {
      const hours = Math.floor(timeRemaining / 3600);
      const minutes = Math.floor((timeRemaining % 3600) / 60);
      const seconds = timeRemaining % 60;
      
      console.log('‚è∞ TIEMPO RESTANTE:');
      console.log(`‚îî‚îÄ ${hours}h ${minutes}m ${seconds}s hasta el pr√≥ximo sorteo`);
    } else {
      console.log('‚è∞ TIEMPO RESTANTE: ¬°El sorteo deber√≠a ejecutarse pronto!');
    }
    console.log('');

    console.log('‚úÖ CONECTIVIDAD EXITOSA - CONTRATO V3 FUNCIONANDO');
    
  } catch (error) {
    console.error('‚ùå ERROR DE CONECTIVIDAD:');
    console.error(error.message);
    console.log('');
    console.log('üí° POSIBLES SOLUCIONES:');
    console.log('‚îú‚îÄ Verificar que el contrato est√© desplegado correctamente');
    console.log('‚îú‚îÄ Comprobar la conexi√≥n a internet');
    console.log('‚îî‚îÄ Verificar que la direcci√≥n del contrato sea correcta');
  }
}

testContractV3(); 